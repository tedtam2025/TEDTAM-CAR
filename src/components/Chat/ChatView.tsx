
import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { MessageCircle, Send, Bot, User, Phone, MapPin, Car, Plus } from 'lucide-react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { useCustomers } from '@/hooks/useCustomers';
import { useAuth } from '@/hooks/useAuth';

interface Message {
  id: string;
  content: string;
  sender: 'user' | 'assistant';
  timestamp: Date;
  customerData?: any;
}

interface ChatRoom {
  id: string;
  name: string;
  type: 'customer' | 'team' | 'ai';
  lastMessage?: string;
  lastMessageTime?: Date;
  unreadCount: number;
  avatar?: string;
}

export const ChatView: React.FC = () => {
  const { customers, loading } = useCustomers();
  const { user } = useAuth();
  const [selectedRoom, setSelectedRoom] = useState<string | null>(null);
  const [messages, setMessages] = useState<Message[]>([]);
  const [newMessage, setNewMessage] = useState('');
  const [chatRooms, setChatRooms] = useState<ChatRoom[]>([]);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Initialize chat rooms
  useEffect(() => {
    const aiRoom: ChatRoom = {
      id: 'ai-assistant',
      name: '‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ AI',
      type: 'ai',
      lastMessage: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
      lastMessageTime: new Date(),
      unreadCount: 0
    };

    const teamRoom: ChatRoom = {
      id: 'team-chat',
      name: '‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô',
      type: 'team',
      lastMessage: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô',
      lastMessageTime: new Date(Date.now() - 2 * 60 * 60 * 1000),
      unreadCount: 2
    };

    const customerRooms: ChatRoom[] = customers.slice(0, 5).map(customer => ({
      id: `customer-${customer.UID}`,
      name: customer.name,
      type: 'customer' as const,
      lastMessage: `‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ${customer.brand} ${customer.model}`,
      lastMessageTime: new Date(Date.now() - Math.random() * 24 * 60 * 60 * 1000),
      unreadCount: Math.floor(Math.random() * 3)
    }));

    setChatRooms([aiRoom, teamRoom, ...customerRooms]);
  }, [customers]);

  // Initialize AI assistant messages
  useEffect(() => {
    if (selectedRoom === 'ai-assistant' && messages.length === 0) {
      const welcomeMessage: Message = {
        id: 'welcome',
        content: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ AI ‡∏Ç‡∏≠‡∏á TEDTAM Car ‡∏ú‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡πà‡∏ô:\n\n‚Ä¢ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤\n‚Ä¢ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏á‡∏≤‡∏ô\n‚Ä¢ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô\n‚Ä¢ ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö\n\n‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö?',
        sender: 'assistant',
        timestamp: new Date()
      };
      setMessages([welcomeMessage]);
    }
  }, [selectedRoom, messages.length]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async () => {
    if (!newMessage.trim() || !selectedRoom) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: newMessage,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setNewMessage('');

    // Simulate AI response for AI assistant
    if (selectedRoom === 'ai-assistant') {
      setTimeout(() => {
        const aiResponse = generateAIResponse(newMessage);
        const assistantMessage: Message = {
          id: (Date.now() + 1).toString(),
          content: aiResponse.content,
          sender: 'assistant',
          timestamp: new Date(),
          customerData: aiResponse.customerData
        };
        setMessages(prev => [...prev, assistantMessage]);
      }, 1000);
    }
  };

  const generateAIResponse = (userInput: string) => {
    const input = userInput.toLowerCase();
    
    if (input.includes('‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤') || input.includes('customer')) {
      const randomCustomer = customers[Math.floor(Math.random() * customers.length)];
      if (randomCustomer) {
        return {
          content: `‡∏ú‡∏°‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:\n\nüìã **${randomCustomer.name}**\nüè¢ ‡∏™‡∏≤‡∏Ç‡∏≤: ${randomCustomer.branch}\nüí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô: ‡∏ø${randomCustomer.principle.toLocaleString()}\nüìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${randomCustomer.workStatus}\nüéØ RESUS: ${randomCustomer.resus}\n\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏±‡∏ö?`,
          customerData: randomCustomer
        };
      }
    }
    
    if (input.includes('‡∏ú‡∏•‡∏á‡∏≤‡∏ô') || input.includes('performance')) {
      const totalCustomers = customers.length;
      const completedCases = customers.filter(c => c.workStatus === '‡∏à‡∏ö').length;
      const successRate = totalCustomers > 0 ? ((completedCases / totalCustomers) * 100).toFixed(1) : '0';
      
      return {
        content: `üìä **‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì**\n\nüë• ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalCustomers} ‡∏£‡∏≤‡∏¢\n‚úÖ ‡πÄ‡∏Ñ‡∏™‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${completedCases} ‡∏£‡∏≤‡∏¢\nüìà ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${successRate}%\n\n‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏≠‡∏µ‡∏Å‡πÑ‡∏´‡∏°?`,
        customerData: null
      };
    }
    
    if (input.includes('‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥') || input.includes('‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå')) {
      return {
        content: `üí° **‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô**\n\n1. üéØ **‡∏°‡∏∏‡πà‡∏á‡πÄ‡∏ô‡πâ‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏®‡∏±‡∏Å‡∏¢‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á**\n   - ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡∏°‡∏≤‡∏Å\n   - ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢\n\n2. üìû **‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°**\n   - ‡πÇ‡∏ó‡∏£‡∏ó‡∏∏‡∏Å‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå\n   - ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥\n\n3. üó∫Ô∏è **‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û**\n   - ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà\n   - ‡πÉ‡∏ä‡πâ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô\n\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?`,
        customerData: null
      };
    }
    
    // Default responses
    const responses = [
      '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏™‡∏°‡∏≠',
      '‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡∏ö?',
      '‡∏ú‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏£‡∏±‡∏ö ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏≤‡∏ö‡πÑ‡∏´‡∏°?',
      '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì'
    ];
    
    return {
      content: responses[Math.floor(Math.random() * responses.length)],
      customerData: null
    };
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('th-TH', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  if (loading) {
    return (
      <div className="p-6 text-center text-white">
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-8 border border-white/20">
          <div className="animate-spin w-8 h-8 border-4 border-orange border-t-transparent rounded-full mx-auto mb-4"></div>
          <h2 className="text-xl font-bold mb-4">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ä‡∏ó...</h2>
        </div>
      </div>
    );
  }

  return (
    <div className="p-4 space-y-4 h-screen flex flex-col">
      {/* Header */}
      <motion.div
        className="text-center text-white"
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
      >
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
          <h1 className="text-2xl font-bold flex items-center justify-center gap-3">
            <MessageCircle className="w-8 h-8 text-orange" />
            ‡πÅ‡∏ä‡∏ó
          </h1>
        </div>
      </motion.div>

      <div className="flex-1 flex flex-col min-h-0">
        {!selectedRoom ? (
          /* Chat Room List */
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold text-white">‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó</h3>
              <Button size="sm" className="bg-orange hover:bg-orange/90">
                <Plus className="w-4 h-4 mr-2" />
                ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà
              </Button>
            </div>
            
            {chatRooms.map((room) => (
              <motion.div
                key={room.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                onClick={() => setSelectedRoom(room.id)}
              >
                <Card className="bg-white/10 backdrop-blur-lg border-white/20 text-white p-4 cursor-pointer hover:bg-white/15 transition-colors">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <div className={`w-12 h-12 rounded-full flex items-center justify-center ${
                        room.type === 'ai' ? 'bg-orange/20' : 
                        room.type === 'team' ? 'bg-blue-500/20' : 'bg-emerald-500/20'
                      }`}>
                        {room.type === 'ai' ? <Bot className="w-6 h-6 text-orange" /> :
                         room.type === 'team' ? <MessageCircle className="w-6 h-6 text-blue-400" /> :
                         <User className="w-6 h-6 text-emerald-400" />}
                      </div>
                      <div className="flex-1">
                        <h4 className="font-semibold">{room.name}</h4>
                        <p className="text-sm text-white/70 truncate">{room.lastMessage}</p>
                      </div>
                    </div>
                    <div className="flex flex-col items-end gap-1">
                      <p className="text-xs text-white/50">
                        {room.lastMessageTime ? formatTime(room.lastMessageTime) : ''}
                      </p>
                      {room.unreadCount > 0 && (
                        <Badge className="bg-orange text-white text-xs px-2 py-1">
                          {room.unreadCount}
                        </Badge>
                      )}
                    </div>
                  </div>
                </Card>
              </motion.div>
            ))}
          </div>
        ) : (
          /* Chat Interface */
          <div className="flex flex-col h-full">
            {/* Chat Header */}
            <Card className="bg-white/10 backdrop-blur-lg border-white/20 text-white p-4 mb-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => setSelectedRoom(null)}
                    className="bg-white/10 border-white/20 text-white hover:bg-white/20"
                  >
                    ‚Üê
                  </Button>
                  <h3 className="font-semibold">
                    {chatRooms.find(r => r.id === selectedRoom)?.name}
                  </h3>
                </div>
                
                {selectedRoom.startsWith('customer-') && (
                  <div className="flex gap-2">
                    <Button size="sm" className="bg-emerald-500 hover:bg-emerald-600">
                      <Phone className="w-4 h-4" />
                    </Button>
                    <Button size="sm" className="bg-blue-500 hover:bg-blue-600">
                      <MapPin className="w-4 h-4" />
                    </Button>
                  </div>
                )}
              </div>
            </Card>

            {/* Messages */}
            <div className="flex-1 overflow-y-auto space-y-4 mb-4">
              <AnimatePresence>
                {messages.map((message) => (
                  <motion.div
                    key={message.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                  >
                    <div className={`max-w-[80%] ${
                      message.sender === 'user' 
                        ? 'bg-orange text-white' 
                        : 'bg-white/10 backdrop-blur-lg border-white/20 text-white'
                    } rounded-2xl p-4`}>
                      <div className="flex items-start gap-2">
                        {message.sender === 'assistant' && (
                          <Bot className="w-5 h-5 text-orange mt-1 flex-shrink-0" />
                        )}
                        <div className="flex-1">
                          <p className="whitespace-pre-wrap">{message.content}</p>
                          
                          {/* Customer Data Card */}
                          {message.customerData && (
                            <Card className="bg-white/5 border-white/10 p-3 mt-3">
                              <div className="flex items-center gap-2 mb-2">
                                <Car className="w-4 h-4 text-orange" />
                                <span className="text-sm font-medium">
                                  {message.customerData.brand} {message.customerData.model}
                                </span>
                              </div>
                              <div className="text-xs text-white/70 space-y-1">
                                <p>üìû {message.customerData.phoneNumbers?.[0] || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}</p>
                                <p>üìç {message.customerData.address || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}</p>
                              </div>
                            </Card>
                          )}
                        </div>
                      </div>
                      <p className="text-xs opacity-70 mt-2">
                        {formatTime(message.timestamp)}
                      </p>
                    </div>
                  </motion.div>
                ))}
              </AnimatePresence>
              <div ref={messagesEndRef} />
            </div>

            {/* Message Input */}
            <div className="flex gap-2">
              <Input
                value={newMessage}
                onChange={(e) => setNewMessage(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°..."
                className="flex-1 bg-white/10 border-white/20 text-white placeholder:text-white/50"
              />
              <Button
                onClick={handleSendMessage}
                disabled={!newMessage.trim()}
                className="bg-orange hover:bg-orange/90 text-white"
              >
                <Send className="w-4 h-4" />
              </Button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};
